app.post("/template", async (req: Request, res: Response) => {
  try {    
      const { userPrompt } = req.body;
      const response = await ai.models.generateContent({
        model: 'gemini-2.0-flash-001',
        contents: `Determine framework for: ${userPrompt}. Reply only with 'react' or 'nextjs' again telling you no extra words like - "okay, then, etc..." only reply with either its react or next in lowercase`,
      });

      const answer = response.text?.trim();
      console.log("AI Response:", '"' + answer + '"'); 

      const systemPrompt = getSystemPrompt();

      if (answer == 'react' || answer == 'react.js' || answer == 'reactjs' || answer == 'react js'){  
        const response = await ai.models.generateContentStream({
          model: 'gemini-2.0-flash-001',
          contents: `${systemPrompt} ${basePromptForReact.role} ${customPrompt.cs1} ${basePromptForReact.message1} ${basePromptForReact.message2} ${basePromptForReact.message3} ${customPrompt.cs2}`
        });
        
        for await (const chunk of response) {
          console.log(chunk.text);
        } 
        res.json({
          framework: 'React',
          prompts: [basePromptForReact],
          uiPrompt: uiPrompts.reactUiPrompt
        });
        return;
      } 
      
      else if (answer == 'next' || answer == 'nextjs' || answer == 'next.js' || answer == 'next js') {
        const response = await ai.models.generateContentStream({
            model: 'gemini-2.0-flash-001',
            contents: `${systemPrompt} ${basePromptForNextjs.role} ${customPrompt.cs1} ${basePromptForNextjs.message1} ${basePromptForNextjs.message2} ${basePromptForNextjs.message3} ${customPrompt.cs2}`
        });
        
        for await (const chunk of response) {
            console.log(chunk.text);
        }
        res.json({
          framework: 'Next',
          prompts: [basePromptForNextjs],
          uiPrompt: uiPrompts.nextjsUiPrompt
        });
        return;
      }

    else {
      throw new Error("Invalid framework specified. Please use 'react' or 'nextjs'.");
    }
    
    

  } catch (error) {
      res.status(500).json({ error: 'Internal server error' });
      console.error(error);
      return;
  }

});

export default userPrompt;






////////////////////////////////////////////////////////////////////////////////////

app.post("/api/template", async (req: Request, res: Response) => {
  try {    
      const { userPrompt } = req.body;

      const response = await ai.models.generateContent({
        model: 'gemini-2.0-flash-001',
        contents: `Determine framework for: ${userPrompt}. Reply only with 'react' or 'nextjs' again telling you no extra words like - "okay, then, etc..." only reply with either its react or next in lowercase`,
      });

      const answer = response.text?.trim();

      if (answer == 'react' || answer == 'react.js' || answer == 'reactjs' || answer == 'react js'){
        res.json({
          framework: 'React',
          prompts: [getBasePromptForReact(userPrompt)],
          uiPrompt: uiPrompts.reactUiPrompt
        });
        return;
      } 
      
      else if (answer == 'next' || answer == 'nextjs' || answer == 'next.js' || answer == 'next js') {
        res.json({
          framework: 'Next',
          prompts: [getBasePromptForNextjs(userPrompt)],
          uiPrompt: uiPrompts.nextjsUiPrompt
        });
        return;
      }

    else {
      throw new Error("Invalid framework specified. Please use 'react' or 'nextjs'.");
    }

  } catch (error) {
      res.status(500).json({ error: 'Internal server error' });
      console.error(error);
      return;
  }

});

app.post("/api/chat", async (req : Request, res : Response) => {
  const { messages } = req.body;
  
  const response = await ai.models.generateContentStream({
    model: 'gemini-2.0-flash',
    contents: `${systemPrompt} ${customPrompt.cs1} ${messages} ${customPrompt.cs2}`,
    config: {
      maxOutputTokens: 200,
    }
  });

  const debugResponse = (response: any) => {
    console.log('Response status:', {
      modelVersion: response.modelVersion,
      tokenCount: response.usageMetadata.totalTokenCount,
      candidates: response.candidates.length
    });
  };

  console.log(debugResponse);

  for await (const chunk of response) {
    console.log(chunk);
  }

  res.json({});
  
});

--------------------------------------------------------------------------------

app.post("/template", async (req: Request, res: Response) => {
  try {    
      const { userPrompt } = req.body;
      const response = await ai.models.generateContent({
        model: 'gemini-2.0-flash-001',
        contents: `Determine framework for: ${userPrompt}. Reply only with 'react' or 'nextjs' again telling you no extra words like - "okay, then, etc..." only reply with either its react or next in lowercase`,
      });

      const systemPrompt = getSystemPrompt();
      
      const answer = response.text?.trim();
      console.log(answer);

      if (answer == 'react' || answer == 'react.js' || answer == 'reactjs' || answer == 'react js'){  
        const response = await ai.models.generateContentStream({
          model: 'gemini-2.0-flash-001',
          contents: `${systemPrompt} ${customPrompt} ${getBasePromptForReact(userPrompt)}`,
          config: {
            maxOutputTokens: 20000,
          }
        });
        
        for await (const chunk of response) {
          console.log(chunk.text);
        } 
        res.json({
          framework: 'React',
          prompts: [getBasePromptForReact(userPrompt)],
          uiPrompt: uiPrompts.reactUiPrompt
        });
        return;
      } 
      
      else if (answer == 'next' || answer == 'nextjs' || answer == 'next.js' || answer == 'next js') {
        const response = await ai.models.generateContentStream({
            model: 'gemini-2.0-flash-001',
            contents: `${systemPrompt} ${customPrompt} ${getBasePromptForNextjs(userPrompt)}`,
            config: {
              maxOutputTokens: 20000,
            }
        });
        
        for await (const chunk of response) {
            console.log(chunk.text);
        }
        res.json({
          framework: 'Next',
          prompts: [getBasePromptForNextjs(userPrompt)],
          uiPrompt: uiPrompts.nextjsUiPrompt
        });
        return;
      }

    else {
      throw new Error("Invalid framework specified. Please use 'react' or 'nextjs'.");
    }

  } catch (error) {
      res.status(500).json({ error: 'Internal server error' });
      console.error(error);
      return;
  }

});
